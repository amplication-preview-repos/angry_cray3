/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AutomatedPatternIdentificationService } from "../automatedPatternIdentification.service";
import { AutomatedPatternIdentificationCreateInput } from "./AutomatedPatternIdentificationCreateInput";
import { AutomatedPatternIdentification } from "./AutomatedPatternIdentification";
import { AutomatedPatternIdentificationFindManyArgs } from "./AutomatedPatternIdentificationFindManyArgs";
import { AutomatedPatternIdentificationWhereUniqueInput } from "./AutomatedPatternIdentificationWhereUniqueInput";
import { AutomatedPatternIdentificationUpdateInput } from "./AutomatedPatternIdentificationUpdateInput";

export class AutomatedPatternIdentificationControllerBase {
  constructor(
    protected readonly service: AutomatedPatternIdentificationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AutomatedPatternIdentification })
  async createAutomatedPatternIdentification(
    @common.Body() data: AutomatedPatternIdentificationCreateInput
  ): Promise<AutomatedPatternIdentification> {
    return await this.service.createAutomatedPatternIdentification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AutomatedPatternIdentification] })
  @ApiNestedQuery(AutomatedPatternIdentificationFindManyArgs)
  async automatedPatternIdentifications(
    @common.Req() request: Request
  ): Promise<AutomatedPatternIdentification[]> {
    const args = plainToClass(
      AutomatedPatternIdentificationFindManyArgs,
      request.query
    );
    return this.service.automatedPatternIdentifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AutomatedPatternIdentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async automatedPatternIdentification(
    @common.Param() params: AutomatedPatternIdentificationWhereUniqueInput
  ): Promise<AutomatedPatternIdentification | null> {
    const result = await this.service.automatedPatternIdentification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AutomatedPatternIdentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAutomatedPatternIdentification(
    @common.Param() params: AutomatedPatternIdentificationWhereUniqueInput,
    @common.Body() data: AutomatedPatternIdentificationUpdateInput
  ): Promise<AutomatedPatternIdentification | null> {
    try {
      return await this.service.updateAutomatedPatternIdentification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AutomatedPatternIdentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAutomatedPatternIdentification(
    @common.Param() params: AutomatedPatternIdentificationWhereUniqueInput
  ): Promise<AutomatedPatternIdentification | null> {
    try {
      return await this.service.deleteAutomatedPatternIdentification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
